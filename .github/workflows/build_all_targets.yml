# NOTE: this workflow is now running on Dronecode / PX4 AWS account.
# - If you want to keep the tests running in GitHub Actions you need to uncomment the "runs-on: ubuntu-latest" lines
#   and comment the "runs-on: [runs-on,runner=..." lines.
# - If you would like to duplicate this setup try setting up "RunsOn" on your own AWS account try https://runs-on.com

name: Build AvesAID Hardware Targets  # AvesAID: Primary workflow - v6c and v6x hardware only (SITL disabled)

on:
  push:
    branches:
    - 'main'
    - 'avesaid-main'  # AvesAID: Enable for custom builds
    - 'stable'
    - 'beta'
    - 'release/*'
  pull_request:
    branches:
    - '*'

jobs:
  build_avesaid_targets:  # AvesAID: Custom job for v6c and v6x hardware targets
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest  # AvesAID: Use standard GitHub runners to avoid queuing
    # runs-on: [runs-on,runner=8cpu-linux-x64,image=ubuntu22-full-x64,"run-id=${{ github.run_id }}"]
    container:
      image: px4io/px4-dev-nuttx-focal:2022-08-12
    strategy:
      fail-fast: false
      matrix:
        target: [
          "px4_fmu-v6c_default",     # AvesAID: Primary hardware target
          "px4_fmu-v6x_default"      # AvesAID: Secondary hardware target
        ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ownership workaround
        run: git config --system --add safe.directory '*'

      - name: Initialize and update submodules with Avestec fork  # AvesAID: Custom submodule initialization for Avestec mavlink fork
        run: |
          # AvesAID: Robust submodule initialization for custom MAVLink messages
          echo "Setting up Avestec mavlink fork..."
          
          # AvesAID: Ensure .gitmodules points to correct URL
          git config -f .gitmodules submodule.src/modules/mavlink/mavlink.url https://github.com/Avestec/mavlink.git
          git config -f .gitmodules submodule.src/modules/mavlink/mavlink.branch master
          
          # AvesAID: Initialize all submodules (this creates the directory structure)
          git submodule sync --recursive
          git submodule update --init --recursive --force
          
          # AvesAID: Verify we're using the Avestec mavlink fork with SKYRON.xml
          cd src/modules/mavlink/mavlink
          echo "Current mavlink submodule info:"
          git remote -v
          git log --oneline -5
          
          # AvesAID: Check if SKYRON.xml exists with custom MAVLINK_MSG_ID_AVESAID_STATUS and MAV_CMD_MAGNET
          if [ -f message_definitions/v1.0/SKYRON.xml ]; then
            echo "✅ SKYRON.xml found!"
            ls -la message_definitions/v1.0/SKYRON.xml
            echo "✅ AvesAID custom messages available for build"
          else
            echo "❌ SKYRON.xml NOT found! Available message definitions:"
            ls -la message_definitions/v1.0/ | head -10
            echo "❌ This will cause MAVLINK_MSG_ID_AVESAID_STATUS compilation errors"
            exit 1
          fi

      - name: ccache setup keys  # AvesAID: Enable ccache for faster builds
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: avesaid-${{ matrix.target }}-ccache-${{ github.run_id }}
          restore-keys: avesaid-${{ matrix.target }}-ccache

      - name: setup ccache  # AvesAID: Configure ccache for optimal performance
        run: |
            mkdir -p ~/.ccache
            echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
            echo "compression = true" >> ~/.ccache/ccache.conf
            echo "compression_level = 6" >> ~/.ccache/ccache.conf
            echo "max_size = 120M" >> ~/.ccache/ccache.conf
            echo "hash_dir = false" >> ~/.ccache/ccache.conf
            ccache -s
            ccache -z

      - name: Build ${{ matrix.target }}  # AvesAID: Build specific AvesAID hardware target
        run: |
            echo "Building AvesAID target: ${{ matrix.target }}"
            
            # AvesAID: Apply DroneCAN remote ID bypass (same as Bitbucket pipeline)
            echo "Applying DroneCAN remote ID bypass for hardware builds..."
            
            # AvesAID: Comment out remoteid includes in CMakeLists.txt
            sed -i 's/remoteid\.cpp/#remoteid.cpp # AvesAID: Disabled for hardware build/' src/drivers/uavcan/CMakeLists.txt || true
            sed -i 's/remoteid\.hpp/#remoteid.hpp # AvesAID: Disabled for hardware build/' src/drivers/uavcan/CMakeLists.txt || true
            
            # AvesAID: Comment out remoteid include in uavcan_main.hpp
            sed -i 's/#include "remoteid\.hpp"/\/\/#include "remoteid.hpp" \/\/ AvesAID: Disabled for hardware build/' src/drivers/uavcan/uavcan_main.hpp || true
            
            # AvesAID: Comment out UavcanRemoteIDController member variable declaration
            sed -i 's/UavcanRemoteIDController _remoteid_controller;/\/\/UavcanRemoteIDController _remoteid_controller; \/\/ AvesAID: Disabled for hardware build/' src/drivers/uavcan/uavcan_main.hpp || true
            
            # AvesAID: Comment out remote ID controller initialization in uavcan_main.cpp
            sed -i 's/_remoteid_controller(_node),/\/\/_remoteid_controller(_node), \/\/ AvesAID: Disabled for hardware build/' src/drivers/uavcan/uavcan_main.cpp || true
            sed -i 's/ret = _remoteid_controller\.init();/\/\/ret = _remoteid_controller.init(); \/\/ AvesAID: Disabled for hardware build/' src/drivers/uavcan/uavcan_main.cpp || true
            
            echo "Remote ID bypass applied, building firmware..."
            make ${{ matrix.target }}

      - name: Upload AvesAID firmware artifacts  # AvesAID: Upload built firmware files
        uses: actions/upload-artifact@v4
        with:
          name: avesaid-${{ matrix.target }}-firmware
          path: |
            build/**/*.px4
            build/**/*.bin
          compression-level: 0

      - name: ccache post-run  # AvesAID: Show ccache statistics
        run: ccache -s
