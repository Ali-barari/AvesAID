image: px4io/px4-dev-base-focal:2022-08-12   # PX4 dev container with older, more compatible toolchain

options:
  clone:
    depth: full
    submodules: true   # ✅ ensures submodules checkout to pinned commits

definitions:
  steps:
    - step: &build-step
        name: Build PX4 for v6C and v6X
        services:
          - docker
        caches:
          - docker
        script:
          - echo "🔄 Building PX4 firmware for Pixhawk 6C and 6X..."
          # Ensure all submodules are properly initialized and updated
          - git submodule update --init --recursive --force
          # Ensure ARM toolchain is in PATH
          - export PATH="/usr/lib/gcc/arm-none-eabi/bin:$PATH"
          - export PATH="/opt/gcc-arm-none-eabi/bin:$PATH"
          # Check if ARM toolchain is available
          - which arm-none-eabi-gcc || echo "ARM toolchain not found in standard locations"
          - arm-none-eabi-gcc --version || echo "ARM GCC not working, will try to install"
          # Install specific ARM toolchain version that matches local (9-2020-q2-update)
          - wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2
          - tar -xjf gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2 -C /opt/
          - export PATH="/opt/gcc-arm-none-eabi-9-2020-q2-update/bin:$PATH"
          # Verify toolchain after installation
          - which arm-none-eabi-gcc && arm-none-eabi-gcc --version
          # Install required Python dependencies
          - pip3 install symforce
          # Install DSDL generation dependencies
          - pip3 install empy pexpect future pyserial
          # Ensure Python environment is ready for DSDL compilation
          - python3 --version
          - which python3
          # Ensure DSDL files are generated (DroneCAN message definitions)
          - python3 -c "import dronecan_dsdlc" || pip3 install dronecan
          # Pre-generate DSDL files manually to ensure they exist
          - mkdir -p build/px4_fmu-v6c_default/src/drivers/uavcan/include/dsdlc_generated
          - cd src/drivers/uavcan && python3 libuavcan/libuavcan/dsdl_compiler/libuavcan_dsdlc --outdir ../../../build/px4_fmu-v6c_default/src/drivers/uavcan/include/dsdlc_generated libuavcan/dsdl/ardupilot libuavcan/dsdl/com libuavcan/dsdl/cuav libuavcan/dsdl/dronecan libuavcan/dsdl/uavcan || echo "DSDL generation failed, continuing with build"
          - cd ../../..
          # Set compiler flags to be less strict (allow warnings that would be errors)
          - export CXXFLAGS="-Wno-error"
          - export CFLAGS="-Wno-error"
          # Temporarily disable remote ID files that require DSDL generation
          - sed -i 's/remoteid\.cpp/#remoteid.cpp/' src/drivers/uavcan/CMakeLists.txt
          - sed -i 's/remoteid\.hpp/#remoteid.hpp/' src/drivers/uavcan/CMakeLists.txt
          - sed -i 's/#include "remoteid.hpp"/\/\/#include "remoteid.hpp"/' src/drivers/uavcan/uavcan_main.hpp
          # Disable remote ID controller declarations by commenting out the conditional blocks
          - sed -i 's/#if defined(CONFIG_UAVCAN_REMOTEID_CONTROLLER)/#if 0 \/\/ disabled CONFIG_UAVCAN_REMOTEID_CONTROLLER/' src/drivers/uavcan/uavcan_main.hpp
          - sed -i 's/#if defined(CONFIG_UAVCAN_REMOTEID_CONTROLLER)/#if 0 \/\/ disabled CONFIG_UAVCAN_REMOTEID_CONTROLLER/' src/drivers/uavcan/uavcan_main.cpp
          # Clean any previous build artifacts to ensure fresh configuration
          - make clean || true
          - rm -rf build/ || true
          # Build with explicit flags to disable -Werror
          - make px4_fmu-v6c_default CXXFLAGS="-Wno-error" CFLAGS="-Wno-error" || make px4_fmu-v6c_default VERBOSE=1
          - make px4_fmu-v6x_default CXXFLAGS="-Wno-error" CFLAGS="-Wno-error" || make px4_fmu-v6x_default VERBOSE=1
        artifacts:
          - build/px4_fmu-v6c_default/px4_fmu-v6c_default.px4
          - build/px4_fmu-v6x_default/px4_fmu-v6x_default.px4
          - scripts/deployment/*  # Include deployment scripts
    
    - step: &deploy-flight-controller
        name: Deploy Flight Controller to AWS
        deployment: development
        condition:
          changesets:
            includePaths:
              - "src/**"
              - "boards/**"
              - "cmake/**"
              - "platforms/**"
        script:
          - echo "🔧 Installing required tools for deployment..."
          - export DEBIAN_FRONTEND=noninteractive
          - apt-get update && apt-get install -y awscli jq curl wget
          - echo "📋 Setting up deployment scripts..."
          - chmod +x scripts/deployment/*.sh
          - echo "🔑 Setting up environment variables and deploying..."
          - |
            export AWS_ACCESS_KEY_ID="$MANAGEMENT_AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$MANAGEMENT_AWS_SECRET_ACCESS_KEY"
            export AWS_DEFAULT_REGION="$AWS_REGION"
            export AWS_ACCOUNT_ID="$AWS_ACCOUNT_ID"
            export AWS_REGION="$AWS_REGION"
            export CROSS_ACCOUNT_ROLE_ARN="$CROSS_ACCOUNT_ROLE_ARN"
            export CROSS_ACCOUNT_EXTERNAL_ID="$CROSS_ACCOUNT_EXTERNAL_ID"
            export CROSS_ACCOUNT_SESSION_NAME="AvestecFlightControllerDeployment"
            export UPDATE_API_URL="$UPDATE_API_URL"
            export UPDATE_API_KEY="$UPDATE_API_KEY"
            echo "🏷️ Generating version metadata..."
            ./scripts/deployment/generate-version-metadata.sh --output-json > version_info.json
            VERSION=$(jq -r '.version' version_info.json)
            echo "🚀 Deploying flight controller version: $VERSION"
            echo "📤 Uploading v6c binary to S3..."
            ./scripts/deployment/upload-flight-controller-binary.sh --file build/px4_fmu-v6c_default/px4_fmu-v6c_default.px4 --type v6c --version $VERSION --verbose
            echo "📤 Uploading v6x binary to S3..."
            ./scripts/deployment/upload-flight-controller-binary.sh --file build/px4_fmu-v6x_default/px4_fmu-v6x_default.px4 --type v6x --version $VERSION --verbose
            echo "🚀 Publishing flight controller version via API..."
            ./scripts/deployment/publish-firmware-version.sh --version $VERSION --verbose
            echo "✅ Successfully deployed flight controller version $VERSION"
        after-script:
          - echo "🧹 Flight controller deployment completed"

pipelines:
  default:
    - step: *build-step
  
  branches:
    avesaid-main:
      - step: *build-step
      - step:
          <<: *deploy-flight-controller
          trigger: manual  # Require manual approval for main branch
    
    develop:
      - step: *build-step
      - step:
          <<: *deploy-flight-controller
          trigger: automatic  # Auto-deploy on develop branch
    
    feature/firmware-deployment-pipeline-fix:
      - step: *build-step
      - step:
          name: Test Deployment (Dry-Run)
          script:
            # Install required tools for testing
            - echo "🧪 Testing deployment scripts with dry-run..."
            - export DEBIAN_FRONTEND=noninteractive
            - apt-get update && apt-get install -y awscli jq curl wget
            
            # Make deployment scripts executable
            - chmod +x scripts/deployment/*.sh
            
            # Test version generation
            - echo "🏷️ Testing version metadata generation..."
            - ./scripts/deployment/generate-version-metadata.sh --dry-run --verbose
            
            # Test S3 upload (dry-run)
            - echo "📤 Testing S3 upload (dry-run)..."
            - ./scripts/deployment/upload-flight-controller-binary.sh --file build/px4_fmu-v6c_default/px4_fmu-v6c_default.px4 --type v6c --version test-version --dry-run
            
            # Test API publishing (dry-run)
            - echo "🚀 Testing API publishing (dry-run)..."
            - ./scripts/deployment/publish-firmware-version.sh --version test-version --dry-run
            
            - echo "✅ Dry-run testing completed successfully"
